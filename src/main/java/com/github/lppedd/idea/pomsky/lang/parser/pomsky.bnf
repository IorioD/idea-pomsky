//
// IntelliJ IDEA BNF grammar for the Pomsky language
// Author: Edoardo Luppi
//
// Note: the grammar that follows might look wrong, overcomplicated, or missing pieces,
//  but remember it's meant to parse the entire file without ever failing, and to only
//  build elements we actually need for other usages (references, completion, etc.).
//
{
  parserClass = "com.github.lppedd.idea.pomsky.lang.parser.PomskyGeneratedParser"
  parserUtilClass = "com.github.lppedd.idea.pomsky.lang.parser.PomskyParserUtil"
  generatePsi = false

  elementTypeHolderClass = "com.github.lppedd.idea.pomsky.lang.psi.PomskyTypes"
  elementTypeClass = "com.github.lppedd.idea.pomsky.lang.parser.PomskyElementType"
  tokenTypeClass = "com.github.lppedd.idea.pomsky.lang.lexer.PomskyTokenType"

  tokens = [
    DOT                 = "."
    COMMA               = ","
    SEMICOLON           = ";"
    COLON               = ":"
    EQ                  = "="
    UNION               = "|"
    NEGATION            = "!"
    LBRACE              = "{"
    RBRACE              = "{"
    GROUP_BEGIN         = "("
    GROUP_END           = ")"
    CLASS_BEGIN         = "["
    CLASS_END           = "]"
    RANGE_SEPARATOR     = "-"
    LOOKAHEAD           = ">>"
    LOOKAHEAD_NEGATED   = "!>>"
    LOOKBEHIND          = "<<"
    LOOKBEHIND_NEGATED  = "!<<"
    COMMENT             = "regexp:#.*"
    KEYWORD             = "regexp:let|enable|disable|lazy|greedy|atomic|range|regex|base|if|else"
    QUANTIFIER          = "regexp:[*+?]"
    BOUNDARY            = "regexp:[\^$]|!?%|Start|End"
    STRING              = "regexp:'.*'"
    NUMBER              = "regexp:[+-]?[0-9_.,]+"
    CODE_POINT          = "regexp:U\+?[a-fA-F0-9]{1,6}"
    IDENTIFIER          = "regexp:[a-zA-Z_][a-zA-Z_0-9]*"
    GROUP_NAME          = "regexp::[a-zA-Z]*"
    GROUP_REFERENCE     = "regexp:::[a-zA-Z]+"
  ]
}

root ::=
    (statement | expression)*

private statement ::=
      variable_declaration
    | modifier_activation

variable_declaration ::=
    "let" IDENTIFIER EQ expression SEMICOLON
    { pin = 2 }

modifier_activation ::=
    modifier_keyword boolean_setting SEMICOLON
    { pin = 1 }

private modifier_keyword ::=
      "enable"
    | "disable"

private boolean_setting ::=
    "lazy";

expression ::=
    UNION? alternatives

private alternatives ::=
    alternative (UNION alternative)*

private alternative ::=
    inner_expression+

private inner_expression ::=
      atom_expression quantifier_suffix*
    | lookaround_prefix expression?

private atom_expression ::=
      DOT
    | BOUNDARY
    | STRING
    | CODE_POINT
    | IDENTIFIER
    | GROUP_REFERENCE
    | group_expression
    | character_set_expression
    | range_expression
    | regex_expression

private lookaround_prefix ::=
      LOOKAHEAD
    | LOOKAHEAD_NEGATED
    | LOOKBEHIND
    | LOOKBEHIND_NEGATED

// *****************************************************************************
// Quantifier
// *****************************************************************************

quantifier_suffix ::=
    quantifier_value quantifier_type?

private quantifier_value ::=
      QUANTIFIER
    | repetition_quantifier

private repetition_quantifier ::=
      repetition_quantifier_range
    | repetition_quantifier_fixed
    { recoverWhile = generic_expression_recovery }

private repetition_quantifier_range ::=
    LBRACE NUMBER? COMMA NUMBER? RBRACE
    { pin = 3 }

private repetition_quantifier_fixed ::=
    LBRACE NUMBER? RBRACE
    { pin = 1 }

private quantifier_type ::=
      "greedy"
    | "lazy"

// *****************************************************************************
// Group Expression
// *****************************************************************************

private group_expression ::=
      group_expression_atomic
    | group_expression_capturing_named
    | group_expression_capturing_numbered
    | group_expression_capturing_named_begin_missing
    | group_expression_capturing_begin_missing
    | group_expression_non_capturing
    { recoverWhile = generic_expression_recovery }

group_expression_atomic ::=
    "atomic" GROUP_BEGIN root GROUP_END
    { pin = 2 }

group_expression_capturing_named ::=
    COLON GROUP_NAME GROUP_BEGIN root GROUP_END
    { pin = 3 }

group_expression_capturing_numbered ::=
    COLON GROUP_BEGIN root GROUP_END
    { pin = 2 }

group_expression_non_capturing ::=
    GROUP_BEGIN root GROUP_END
    { pin = 1 }

// These private rules are only meant to improve error recovery and reporting in cases like:
//   : 'example'
//      here the '(' token is missing and should be reported
//   :groupname 'example'
//      here the '(' token after 'groupname' is missing and should be reported
private group_expression_capturing_named_begin_missing ::=
    COLON GROUP_NAME GROUP_BEGIN
    { pin = 2 }

private group_expression_capturing_begin_missing ::=
    COLON GROUP_BEGIN
    { pin = 1 }

// *****************************************************************************
// Character set Expression
// *****************************************************************************

// FIXME: this does not work correctly with an expression like [..]
character_set_expression ::=
      character_set_expression_dot
    | character_set_expression_inner
    { recoverWhile = generic_expression_recovery }

// Deprecated
private character_set_expression_dot ::=
    NEGATION? CLASS_BEGIN DOT CLASS_END
    { pin = 3 }

private character_set_expression_inner ::=
    NEGATION? CLASS_BEGIN character_set_inner+ CLASS_END
    { pin = 2 }

private character_set_inner ::=
      character_set_range
    | CODE_POINT
    | NEGATION? STRING
    | NEGATION? IDENTIFIER

character_set_range ::=
    single_char RANGE_SEPARATOR single_char
    { pin = 2 }

private single_char ::=
      STRING
    | CODE_POINT

// *****************************************************************************
// Range Expression
// *****************************************************************************

range_expression ::=
    "range" STRING RANGE_SEPARATOR STRING ("base" NUMBER)?
    { pin = 3 }

// *****************************************************************************
// Regex Expression
// *****************************************************************************

regex_expression ::=
    "regex" STRING
    { pin = 1 }

// *****************************************************************************
// Recovery rules
// *****************************************************************************

private generic_expression_recovery ::=
    !(
        SEMICOLON
      | COLON
      | NEGATION
      | UNION
      | LBRACE
      | BOUNDARY
      | LOOKAHEAD
      | LOOKAHEAD_NEGATED
      | LOOKBEHIND
      | LOOKBEHIND_NEGATED
      | GROUP_END
      | GROUP_BEGIN
      | CLASS_BEGIN
      | CLASS_END
      | QUANTIFIER
      | CODE_POINT
      | STRING
      | NUMBER
      | KEYWORD
      | IDENTIFIER
      | GROUP_NAME
      | GROUP_REFERENCE
    )
